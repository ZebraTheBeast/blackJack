{"version":3,"sources":["ng://@swimlane/ngx-dnd/lib/services/drake-store.service.ts","ng://@swimlane/ngx-dnd/lib/directives/ngx-droppable.directive.ts","ng://@swimlane/ngx-dnd/lib/directives/ngx-draggable.directive.ts","ng://@swimlane/ngx-dnd/lib/directives/ngx-drag-handle.directive.ts","ng://@swimlane/ngx-dnd/lib/components/container/container.component.ts","ng://@swimlane/ngx-dnd/lib/components/item/item.component.ts","ng://@swimlane/ngx-dnd/lib/ngx-dnd.module.ts"],"names":["dragula","dragulaNamespace","DrakeStoreService","WeakMap","this","dragulaOptions","createDrakeOptions","drake","registerEvents","prototype","register","droppable","droppableMap","set","container","containers","push","remove","delete","idx","indexOf","splice","registerDraggable","draggable","draggableMap","element","removeDraggable","_this","accepts","el","target","contains","elementComponent","get","targetComponent","dropZones","includes","dropZone","copy","_","source","sourceComponent","moves","handle","sibling","revertOnSpill","direction","dragElm","draggedItem","on","undefined","has","model","drag","emit","type","value","removeOnSpill","dropElmModel","dropIndex","Array","call","children","cancel","sourceModel","targetModel","hasDragModel","dragIndex","parentNode","removeChild","JSON","parse","stringify","drop","appendChild","over","out","Injectable","i","DroppableDirective","renderer","drakesService","EventEmitter","Object","defineProperty","nativeElement","_dropZone","ngxDroppable","defaultZone","val","ngOnInit","ngAfterViewInit","subscribe","addClass","removeClass","ngOnDestroy","Directive","args","selector","ElementRef","Renderer2","Input","Output","DraggableDirective","droppableDirective","_dropZones","ngxDraggable","_parentDropzones","handles","length","onMove","e","_moves","dragDelayed","stopPropagation","clearTimeout","touchTimeout","onDown","setTimeout","dragDelay","onUp","update","updateElements","querySelectorAll","from","filter","h","c","hasAttribute","findFirstDraggableParent","canMove","hasHandle","some","p","handelFor","ngDoCheck","HostListener","ContainerComponent","_defaultZones","v","Component","template","styles","encapsulation","ViewEncapsulation","None","ContentChild","TemplateRef","ViewChild","ItemComponent","draggableDirective","_droppableItemClass","droppableItemClass","_removeOnSpill","_copy","classes","moveDisabled","join","isArray","data","HostBinding","components","directives","DragHandleDirective","NgModule","imports","CommonModule","declarations","tslib_1","__spread","exports","providers"],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\n\nimport * as dragulaNamespace from '@swimlane/dragula';\nimport { DroppableDirective } from '../directives/ngx-droppable.directive';\nimport { DraggableDirective } from '../directives/ngx-draggable.directive';\n\n// see https://github.com/dherges/ng-packagr/issues/217\nconst dragula = dragulaNamespace;\n\n/**\n * Central service that handles all events\n *\n * @export\n */\n@Injectable()\nexport class DrakeStoreService {\n  private droppableMap = new WeakMap<any, DroppableDirective>();\n  private draggableMap = new WeakMap<any, DraggableDirective>();\n  private dragulaOptions: dragulaNamespace.DragulaOptions;\n  private drake: dragulaNamespace.Drake;\n\n  constructor() {\n    this.dragulaOptions = this.createDrakeOptions();\n    this.drake = dragula([], this.dragulaOptions);\n    this.registerEvents();\n  }\n\n  register(droppable: DroppableDirective) {\n    this.droppableMap.set(droppable.container, droppable);\n    this.drake.containers.push(droppable.container);\n  }\n\n  remove(droppable: DroppableDirective) {\n    this.droppableMap.delete(droppable.container);\n    const idx = this.drake.containers.indexOf(droppable.container);\n    if (idx > -1) {\n      this.drake.containers.splice(idx, 1);\n    }\n  }\n\n  registerDraggable(draggable: DraggableDirective) {\n    this.draggableMap.set(draggable.element, draggable);\n  }\n\n  removeDraggable(draggable: DraggableDirective) {\n    this.draggableMap.delete(draggable.element);\n  }\n\n  createDrakeOptions(): dragulaNamespace.DragulaOptions {\n    const accepts = (el: any, target: any /*, source: any, sibling: any */) => {\n      if (el.contains(target)) {\n        return false;\n      }\n      const elementComponent = this.draggableMap.get(el);\n      const targetComponent = this.droppableMap.get(target);\n      if (elementComponent && targetComponent) {\n        return elementComponent.dropZones.includes(targetComponent.dropZone);\n      }\n      return true;\n    };\n\n    const copy = (_: any, source: any) => {\n      const sourceComponent = this.droppableMap.get(source);\n      if (sourceComponent) {\n        return sourceComponent.copy;\n      }\n      return false;\n    };\n\n    const moves = (el?: any, source?: any, handle?: any, sibling?: any) => {\n      const elementComponent = this.draggableMap.get(el);\n      if (elementComponent) {\n        return elementComponent.moves(source, handle, sibling);\n      }\n      return true;\n    };\n\n    return { accepts, copy, moves, revertOnSpill: true, direction: 'vertical' };\n  }\n\n  registerEvents(): void {\n    let dragElm: any;\n    let draggedItem: any;\n\n    this.drake.on('drag', (el: any, source: any) => {\n      draggedItem = undefined;\n      dragElm = el;\n\n      if (!el || !source) {\n        return;\n      }\n\n      if (this.draggableMap.has(el)) {\n        const elementComponent = this.draggableMap.get(el);\n        draggedItem = elementComponent.model;\n\n        elementComponent.drag.emit({\n          type: 'drag',\n          el,\n          source,\n          value: draggedItem\n        });\n      }\n\n      if (this.droppableMap.has(source)) {\n        const sourceComponent = this.droppableMap.get(source);\n        this.dragulaOptions.removeOnSpill = sourceComponent.removeOnSpill;\n\n        sourceComponent.drag.emit({\n          type: 'drag',\n          el,\n          source,\n          sourceComponent,\n          value: draggedItem\n        });\n      }\n    });\n\n    this.drake.on('drop', (el: any, target: any, source: any) => {\n      const targetComponent = this.droppableMap.get(target);\n\n      if (!targetComponent) {\n        // not a target, abort\n        return;\n      }\n\n      let dropElmModel = draggedItem;\n      const dropIndex = Array.prototype.indexOf.call(target.children, el);\n\n      if (dropIndex < 0) {\n        // dropIndex is bad... cancel\n        this.drake.cancel(true);\n        return;\n      }\n\n      const sourceComponent = this.droppableMap.get(source);\n\n      if (sourceComponent) {\n        const sourceModel = sourceComponent.model;\n        const targetModel = targetComponent.model;\n\n        const hasDragModel = !!(sourceModel && draggedItem);\n        const dragIndex = hasDragModel ? sourceModel.indexOf(draggedItem) : -1;\n        if (hasDragModel && dragIndex < 0) {\n          // dragIndex is bad... cancel\n          this.drake.cancel(true);\n          return;\n        }\n\n        if (targetModel) {\n          const reorder = dragIndex > -1 && sourceModel && target === source;\n          const copy = !sourceModel || dragElm !== el;\n          if (reorder) {\n            sourceModel.splice(dropIndex, 0, sourceModel.splice(dragIndex, 1)[0]);\n          } else {\n            if (el.parentNode === target) {\n              target.removeChild(el);\n            }\n\n            if (copy) {\n              dropElmModel = JSON.parse(JSON.stringify(dropElmModel));\n            } else {\n              if (el.parentNode !== source) {\n                // add element back, let angular remove it\n                this.drake.cancel(true);\n              }\n              sourceModel.splice(dragIndex, 1);\n            }\n            targetModel.splice(dropIndex, 0, dropElmModel);\n          }\n        }\n      }\n\n      targetComponent.drop.emit({\n        type: 'drop',\n        el,\n        source,\n        value: dropElmModel,\n        dropIndex\n      });\n    });\n\n    this.drake.on('remove', (el: any, container: any, source: any) => {\n      if (this.droppableMap.has(source)) {\n        const sourceComponent = this.droppableMap.get(source);\n        const sourceModel = sourceComponent.model;\n\n        const dragIndex = draggedItem && sourceModel ? sourceModel.indexOf(draggedItem) : -1;\n\n        if (dragIndex > -1) {\n          if (el.parentNode !== source) {\n            // add element back, let angular remove it\n            source.appendChild(el);\n          }\n          sourceModel.splice(dragIndex, 1);\n        }\n\n        sourceComponent.remove.emit({\n          type: 'remove',\n          el,\n          container,\n          source,\n          value: draggedItem\n        });\n      }\n    });\n\n    this.drake.on('cancel', (el: any, container: any, source: any) => {\n      if (this.droppableMap.has(container)) {\n        const containerComponent = this.droppableMap.get(container);\n        containerComponent.cancel.emit({\n          type: 'cancel',\n          el,\n          container,\n          source,\n          value: draggedItem\n        });\n      }\n    });\n\n    this.drake.on('over', (el: any, container: any, source: any) => {\n      if (this.droppableMap.has(container)) {\n        const containerComponent = this.droppableMap.get(container);\n        containerComponent.over.emit({\n          type: 'over',\n          el,\n          container,\n          source,\n          value: draggedItem\n        });\n      }\n    });\n\n    this.drake.on('out', (el: any, container: any, source: any) => {\n      if (this.droppableMap.has(container)) {\n        const containerComponent = this.droppableMap.get(container);\n        containerComponent.out.emit({\n          type: 'out',\n          el,\n          container,\n          source,\n          value: draggedItem\n        });\n      }\n    });\n  }\n}\n","import {\n  Directive,\n  Input,\n  Output,\n  OnInit,\n  OnDestroy,\n  AfterViewInit,\n  ElementRef,\n  EventEmitter,\n  Renderer2\n} from '@angular/core';\n\nimport { DrakeStoreService } from '../services/drake-store.service';\n\nlet i = 10000;\nfunction getNextId() {\n  return i++;\n}\n\n/**\n * Makes the container droppable and children draggable.\n *\n * @export\n */\n@Directive({ selector: '[ngxDroppable]' })\nexport class DroppableDirective implements OnInit, OnDestroy, AfterViewInit {\n  @Input() model: any;\n  @Input() copy = false;\n  @Input() removeOnSpill = false;\n  @Input() ngxDroppable: string;\n\n  @Output() drop: EventEmitter<any> = new EventEmitter<any>();\n\n  @Output() drag: EventEmitter<any> = new EventEmitter<any>();\n\n  @Output() over: EventEmitter<any> = new EventEmitter<any>();\n\n  @Output() out: EventEmitter<any> = new EventEmitter<any>();\n\n  @Output() remove: EventEmitter<any> = new EventEmitter<any>();\n\n  @Output() cancel: EventEmitter<any> = new EventEmitter<any>();\n\n  get container(): any {\n    return this.el.nativeElement;\n  }\n\n  @Input()\n  get dropZone(): string {\n    return this._dropZone || this.ngxDroppable || this.defaultZone;\n  }\n  set dropZone(val: string) {\n    this._dropZone = val;\n  }\n\n  defaultZone: string;\n  _dropZone: string;\n\n  constructor(private el: ElementRef, private renderer: Renderer2, private drakesService: DrakeStoreService) {}\n\n  ngOnInit(): void {\n    this.defaultZone = `@@DefaultDropZone-${getNextId()}@@`;\n    this.drakesService.register(this);\n  }\n\n  ngAfterViewInit(): void {\n    this.over.subscribe(() => {\n      this.renderer.addClass(this.container, 'gu-over');\n    });\n    this.out.subscribe(() => {\n      this.renderer.removeClass(this.container, 'gu-over');\n    });\n  }\n\n  ngOnDestroy(): void {\n    this.drakesService.remove(this);\n  }\n}\n","import { Directive, ElementRef, HostListener, Input, Output, EventEmitter, OnDestroy, OnInit } from '@angular/core';\n\nimport { DroppableDirective } from './ngx-droppable.directive';\nimport { DrakeStoreService } from '../services/drake-store.service';\n\n/**\n * Adds properties and events to draggable elements\n *\n * @export\n */\n@Directive({ selector: '[ngxDraggable]' })\nexport class DraggableDirective implements OnInit, OnDestroy {\n  @Input() ngxDraggable: string[];\n  @Input() model: any;\n\n  @Input()\n  get dropZones(): any {\n    return this._dropZones || this.ngxDraggable || this._parentDropzones;\n  }\n  set dropZones(val: any) {\n    this._dropZones = val;\n  }\n\n  @Input('moves') _moves: boolean | ((...args: any[]) => any) = true;\n\n  /*\n  ContentChildren doesn't get children created with NgTemplateOutlet\n  See https://github.com/angular/angular/issues/14842\n  Implemented via updateElements method\n\n  @ContentChildren(DragHandleDirective, {descendants: true})\n  handlesList: QueryList<DragHandleDirective>; */\n\n  handles: any[] = [];\n\n  get hasHandle() {\n    return !!this.handles.length;\n  }\n\n  @Output() drag: EventEmitter<any> = new EventEmitter<any>();\n\n  dragDelay: number = 200; // milliseconds\n  dragDelayed: boolean = true;\n\n  touchTimeout: any;\n\n  get element(): any {\n    return this.el.nativeElement;\n  }\n\n  _dropZones: string[];\n  _parentDropzones: string[];\n\n  constructor(\n    private el: ElementRef,\n    private drakesService: DrakeStoreService,\n    private droppableDirective: DroppableDirective\n  ) {}\n\n  // From: https://github.com/bevacqua/dragula/issues/289#issuecomment-277143172\n  @HostListener('touchmove', ['$event'])\n  onMove(e: Event) {\n    if (!this._moves || this.dragDelayed) {\n      e.stopPropagation();\n      clearTimeout(this.touchTimeout);\n    }\n  }\n\n  @HostListener('touchstart')\n  onDown() {\n    if (this._moves) {\n      this.touchTimeout = setTimeout(() => {\n        this.dragDelayed = false;\n      }, this.dragDelay);\n    }\n  }\n\n  @HostListener('touchend')\n  onUp() {\n    if (this._moves) {\n      clearTimeout(<number>this.touchTimeout);\n      this.dragDelayed = true;\n    }\n  }\n\n  ngOnInit(): void {\n    this.update();\n  }\n\n  update(): void {\n    this._parentDropzones = [this.droppableDirective.dropZone];\n    this.drakesService.registerDraggable(this);\n    this.updateElements();\n  }\n\n  ngOnDestroy(): void {\n    this.drakesService.removeDraggable(this);\n  }\n\n  updateElements(): void {\n    const nativeElement = this.el.nativeElement;\n    const handles: NodeList = nativeElement.querySelectorAll('[ngxdraghandle]');\n    this.handles = Array.from(handles).filter((h: any) => findFirstDraggableParent(h) === nativeElement);\n\n    function findFirstDraggableParent(c: any) {\n      while (c.parentNode) {\n        c = c.parentNode;\n        if (c.hasAttribute && c.hasAttribute('ngxdraggable')) {\n          return c;\n        }\n      }\n    }\n  }\n\n  canMove(source?: any, handle?: any, sibling?: any): boolean {\n    if (typeof this._moves === 'boolean') return this._moves;\n    if (typeof this._moves === 'function') return this._moves(this.model, source, handle, sibling);\n    return true;\n  }\n\n  moves(source: any, handle: any, sibling: any): boolean {\n    if (!this.canMove(source, handle, sibling)) return false;\n\n    return this.hasHandle ? this.handles.some(h => handelFor(handle, h)) : true;\n\n    function handelFor(c: any, p: any) {\n      if (c === p) return true;\n      while ((c = c.parentNode) && c !== p); // tslint:disable-line\n      return !!c;\n    }\n  }\n\n  ngDoCheck(): void {\n    this.updateElements();\n  }\n}\n","import { Directive } from '@angular/core';\n\n/**\n * Adds properties and events to drag handle elements\n *\n * @export\n */\n@Directive({ selector: '[ngxDragHandle]' })\nexport class DragHandleDirective {}\n","import {\n  Component,\n  OnInit,\n  AfterViewInit,\n  Input,\n  Output,\n  ViewEncapsulation,\n  ContentChild,\n  TemplateRef,\n  ViewChild,\n  EventEmitter\n} from '@angular/core';\n\nimport { DroppableDirective } from '../../directives/ngx-droppable.directive';\n\nlet i = 0;\nfunction getNextId() {\n  return i++;\n}\n\n/**\n * Component that allows nested ngxDroppable and ngxDraggables\n *\n * @export\n */\n@Component({\n  selector: 'ngx-dnd-container',\n  template: `<div\n  ngxDroppable\n  [dropZone]=\"dropZone\"\n  [model]=\"model\"\n  [copy]=\"copy\"\n  [ngClass]=\"{ 'gu-empty': !model?.length }\"\n  [removeOnSpill]=\"removeOnSpill\"\n  class='ngx-dnd-container'>\n  <ng-container *ngIf=\"model\">\n    <ng-container *ngFor=\"let item of model\">\n      <ngx-dnd-item\n        ngxDraggable\n        [model]=\"item\"\n        [dropZone]=\"dropZone\"\n        [dropZones]=\"dropZones\"\n        [copy]=\"copy\"\n        [moves]=\"moves\"\n        [removeOnSpill]=\"removeOnSpill\"\n        [droppableItemClass]=\"droppableItemClass\">\n      </ngx-dnd-item>\n    </ng-container>\n  </ng-container>\n  <ng-content *ngIf=\"!model\"></ng-content>\n</div>\n`,\n  styles: [`.ngx-dnd-container{background-color:rgba(255,255,255,.2);border:2px solid red;margin:10px;padding:10px}.ngx-dnd-container.gu-empty{border:2px dotted red}.ngx-dnd-container:nth-child(odd){background-color:rgba(0,0,0,.2)}.ngx-dnd-container .ex-moved{background-color:#e74c3c}.ngx-dnd-container .ex-over{background-color:rgba(255,255,255,.3)}.ngx-dnd-container .handle{padding:0 5px;margin-right:5px;background-color:rgba(0,0,0,.4);cursor:move}.no-select{-webkit-touch-callout:none;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}`],\n  encapsulation: ViewEncapsulation.None\n})\nexport class ContainerComponent implements OnInit, AfterViewInit {\n  @Input() model: any;\n  @Input() copy = false;\n  @Input() removeOnSpill = false;\n  @Input() droppableItemClass: string | ((o: any) => any);\n\n  @Input() dropZone = `@@DefaultDropZone-${getNextId()}@@`;\n\n  @Input()\n  get dropZones() {\n    return this._dropZones || this._defaultZones;\n  }\n  set dropZones(val) {\n    this._dropZones = val;\n  }\n\n  @Input() moves: (model: any, source: any, handle: any, sibling: any) => boolean;\n\n  // @Input() classes: any = {};\n  // @Input() dragulaOptions: any;\n\n  @Input()\n  @ContentChild(TemplateRef)\n  template: TemplateRef<any>;\n\n  @Input()\n  @ViewChild(DroppableDirective)\n  droppable: any;\n\n  @Output() drop: EventEmitter<any> = new EventEmitter<any>();\n\n  @Output() drag: EventEmitter<any> = new EventEmitter<any>();\n\n  @Output() over: EventEmitter<any> = new EventEmitter<any>();\n\n  @Output() out: EventEmitter<any> = new EventEmitter<any>();\n\n  @Output() remove: EventEmitter<any> = new EventEmitter<any>();\n\n  @Output() cancel: EventEmitter<any> = new EventEmitter<any>();\n\n  _dropZones: string[];\n  _defaultZones: string[];\n\n  ngOnInit() {\n    this._defaultZones = [this.dropZone];\n  }\n\n  ngAfterViewInit() {\n    this.droppable.drag.subscribe((v: any) => this.drag.emit(v));\n    this.droppable.drop.subscribe((v: any) => this.drop.emit(v));\n    this.droppable.over.subscribe((v: any) => this.over.emit(v));\n    this.droppable.out.subscribe((v: any) => this.out.emit(v));\n    this.droppable.remove.subscribe((v: any) => this.remove.emit(v));\n    this.droppable.cancel.subscribe((v: any) => this.cancel.emit(v));\n  }\n}\n","import { Component, OnInit, Input, ViewEncapsulation, HostBinding } from '@angular/core';\n\nimport { ContainerComponent } from '../container/container.component';\nimport { DraggableDirective } from '../../directives/ngx-draggable.directive';\n\n/**\n * Component that allows nested ngxDroppable and ngxDraggables\n * Should only be use inside a ngx-dnd-container\n * Outside a ngx-dnd-container use ngxDroppable\n *\n * @export\n */\n@Component({\n  selector: 'ngx-dnd-item',\n  template: `<ng-container [ngSwitch]=\"type\">\n\n  <ng-container *ngSwitchCase=\"'array'\">\n    <ngx-dnd-container\n      [model]=\"model\"\n      [template]=\"container.template\"\n      [dropZone]=\"dropZone\"\n      [dropZones]=\"dropZones\"\n      [removeOnSpill]=\"removeOnSpill\"\n      [droppableItemClass]=\"droppableItemClass\"\n      [copy]=\"copy\">\n    </ngx-dnd-container>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"'object'\">\n    <ng-template\n      *ngIf=\"container.template\"\n      [ngTemplateOutlet]=\"container.template\"\n      [ngTemplateOutletContext]=\"data\">\n    </ng-template>\n    <ng-container *ngIf=\"!container.template\">\n      <div\n        class=\"ngx-dnd-content\">\n        {{model.label}}\n      </div>\n      <ngx-dnd-container\n        *ngIf=\"model.children\"\n        [model]=\"model.children\"\n        [template]=\"container.template\"\n        [dropZone]=\"dropZone\"\n        [dropZones]=\"dropZones\"\n        [removeOnSpill]=\"removeOnSpill\"\n        [droppableItemClass]=\"droppableItemClass\"\n        [copy]=\"copy\">\n      </ngx-dnd-container>\n    </ng-container>\n  </ng-container>\n\n  <ng-container *ngSwitchCase=\"'undefined'\">\n  </ng-container>\n\n  <ng-container *ngSwitchDefault>\n    <ng-template\n      *ngIf=\"container.template\"\n      [ngTemplateOutlet]=\"container.template\"\n      [ngTemplateOutletContext]=\"data\">\n    </ng-template>\n    <div\n      *ngIf=\"!container.template\"\n      class=\"ngx-dnd-content\">\n      {{model}}\n    </div>\n  </ng-container>\n\n</ng-container>\n\n\n\n\n\n\n\n`,\n  styles: [`.ngx-dnd-item{margin:10px;padding:10px;background-color:rgba(0,0,0,.2);transition:opacity .4s ease-in-out;border:1px solid #add8e6;display:block}.ngx-dnd-item.has-handle [ngxDragHandle],.ngx-dnd-item.has-handle [ngxdraghandle],.ngx-dnd-item:not(.has-handle):not(.move-disabled){cursor:move;cursor:grab;cursor:-webkit-grab}.ngx-dnd-item .ngx-dnd-content{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.ngx-dnd-item:hover{border:1px solid #00f}.gu-mirror{position:fixed!important;margin:0!important;z-index:9999!important;opacity:.8}.gu-hide{display:none!important}.gu-unselectable{-webkit-user-select:none!important;-moz-user-select:none!important;-ms-user-select:none!important;user-select:none!important}.gu-transit{opacity:.2}`],\n  encapsulation: ViewEncapsulation.None\n})\nexport class ItemComponent implements OnInit {\n  @Input() model: any;\n\n  @Input()\n  get dropZone() {\n    return this._dropZone || this.container.dropZone;\n  }\n  set dropZone(val) {\n    this._dropZone = val;\n  }\n\n  @Input()\n  get dropZones() {\n    return this._dropZones || this.container.dropZones;\n  }\n  set dropZones(val) {\n    this._dropZones = val;\n  }\n\n  @Input()\n  get droppableItemClass() {\n    return this._droppableItemClass || this.container.droppableItemClass;\n  }\n  set droppableItemClass(val) {\n    this._droppableItemClass = val;\n  }\n\n  @Input()\n  get removeOnSpill() {\n    return typeof this._removeOnSpill === 'boolean' ? this._removeOnSpill : this.container.removeOnSpill;\n  }\n  set removeOnSpill(val) {\n    this._removeOnSpill = val;\n  }\n\n  @Input()\n  get copy() {\n    return typeof this._copy === 'boolean' ? this._copy : this.container.copy;\n  }\n  set copy(val) {\n    this._copy = val;\n  }\n\n  _copy = false;\n  _dropZone: any;\n  _dropZones: any;\n  _droppableItemClass: any;\n  _removeOnSpill = false;\n  data: any;\n\n  get hasHandle(): boolean {\n    return this.draggableDirective.hasHandle;\n  }\n\n  get moveDisabled(): boolean {\n    return !this.draggableDirective.canMove();\n  }\n\n  @HostBinding('class')\n  get classString() {\n    const itemClass =\n      typeof this.droppableItemClass === 'function' ? this.droppableItemClass(this.model) : this.droppableItemClass;\n\n    const classes = ['ngx-dnd-item', itemClass || ''];\n    if (this.moveDisabled) {\n      classes.push('move-disabled');\n    }\n    if (this.hasHandle) {\n      classes.push('has-handle');\n    }\n    return classes.join(' ');\n  }\n\n  get type() {\n    if (Array.isArray(this.model)) {\n      return 'array';\n    }\n    return typeof this.model;\n  }\n\n  constructor(public container: ContainerComponent, public draggableDirective: DraggableDirective) {}\n\n  ngOnInit() {\n    this.data = {\n      model: this.model,\n      type: this.type,\n      dropZone: this.dropZone,\n      template: this.container.template\n    };\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { DraggableDirective } from './directives/ngx-draggable.directive';\nimport { DroppableDirective } from './directives/ngx-droppable.directive';\nimport { DragHandleDirective } from './directives/ngx-drag-handle.directive';\nimport { ContainerComponent } from './components/container/container.component';\nimport { ItemComponent } from './components/item/item.component';\nimport { DrakeStoreService } from './services/drake-store.service';\n\nconst components = [ContainerComponent, ItemComponent];\nconst directives = [DraggableDirective, DroppableDirective, DragHandleDirective];\n\n@NgModule({\n  imports: [CommonModule],\n  declarations: [...components, ...directives],\n  exports: [...components, ...directives],\n  providers: [DrakeStoreService]\n})\nexport class NgxDnDModule {}\n"]}